// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Classes.proto

#ifndef PROTOBUF_INCLUDED_Classes_2eproto
#define PROTOBUF_INCLUDED_Classes_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Classes_2eproto 

namespace protobuf_Classes_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Classes_2eproto
class Atleta;
class AtletaDefaultTypeInternal;
extern AtletaDefaultTypeInternal _Atleta_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class Time_Tecnico;
class Time_TecnicoDefaultTypeInternal;
extern Time_TecnicoDefaultTypeInternal _Time_Tecnico_default_instance_;
namespace google {
namespace protobuf {
template<> ::Atleta* Arena::CreateMaybeMessage<::Atleta>(Arena*);
template<> ::Time* Arena::CreateMaybeMessage<::Time>(Arena*);
template<> ::Time_Tecnico* Arena::CreateMaybeMessage<::Time_Tecnico>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Time_Tecnico : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Time.Tecnico) */ {
 public:
  Time_Tecnico();
  virtual ~Time_Tecnico();

  Time_Tecnico(const Time_Tecnico& from);

  inline Time_Tecnico& operator=(const Time_Tecnico& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Time_Tecnico(Time_Tecnico&& from) noexcept
    : Time_Tecnico() {
    *this = ::std::move(from);
  }

  inline Time_Tecnico& operator=(Time_Tecnico&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Time_Tecnico& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time_Tecnico* internal_default_instance() {
    return reinterpret_cast<const Time_Tecnico*>(
               &_Time_Tecnico_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Time_Tecnico* other);
  friend void swap(Time_Tecnico& a, Time_Tecnico& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Time_Tecnico* New() const final {
    return CreateMaybeMessage<Time_Tecnico>(NULL);
  }

  Time_Tecnico* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Time_Tecnico>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Time_Tecnico& from);
  void MergeFrom(const Time_Tecnico& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time_Tecnico* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nome = 1;
  void clear_nome();
  static const int kNomeFieldNumber = 1;
  const ::std::string& nome() const;
  void set_nome(const ::std::string& value);
  #if LANG_CXX11
  void set_nome(::std::string&& value);
  #endif
  void set_nome(const char* value);
  void set_nome(const char* value, size_t size);
  ::std::string* mutable_nome();
  ::std::string* release_nome();
  void set_allocated_nome(::std::string* nome);

  // int32 idade = 2;
  void clear_idade();
  static const int kIdadeFieldNumber = 2;
  ::google::protobuf::int32 idade() const;
  void set_idade(::google::protobuf::int32 value);

  // int32 qtdTitulos = 3;
  void clear_qtdtitulos();
  static const int kQtdTitulosFieldNumber = 3;
  ::google::protobuf::int32 qtdtitulos() const;
  void set_qtdtitulos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Time.Tecnico)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nome_;
  ::google::protobuf::int32 idade_;
  ::google::protobuf::int32 qtdtitulos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Classes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(Time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Time* other);
  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return CreateMaybeMessage<Time>(NULL);
  }

  Time* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Time_Tecnico Tecnico;

  // accessors -------------------------------------------------------

  // string nome = 1;
  void clear_nome();
  static const int kNomeFieldNumber = 1;
  const ::std::string& nome() const;
  void set_nome(const ::std::string& value);
  #if LANG_CXX11
  void set_nome(::std::string&& value);
  #endif
  void set_nome(const char* value);
  void set_nome(const char* value, size_t size);
  ::std::string* mutable_nome();
  ::std::string* release_nome();
  void set_allocated_nome(::std::string* nome);

  // string tecnico = 2;
  void clear_tecnico();
  static const int kTecnicoFieldNumber = 2;
  const ::std::string& tecnico() const;
  void set_tecnico(const ::std::string& value);
  #if LANG_CXX11
  void set_tecnico(::std::string&& value);
  #endif
  void set_tecnico(const char* value);
  void set_tecnico(const char* value, size_t size);
  ::std::string* mutable_tecnico();
  ::std::string* release_tecnico();
  void set_allocated_tecnico(::std::string* tecnico);

  // int32 pontos = 3;
  void clear_pontos();
  static const int kPontosFieldNumber = 3;
  ::google::protobuf::int32 pontos() const;
  void set_pontos(::google::protobuf::int32 value);

  // int32 qtdJogos = 4;
  void clear_qtdjogos();
  static const int kQtdJogosFieldNumber = 4;
  ::google::protobuf::int32 qtdjogos() const;
  void set_qtdjogos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Time)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nome_;
  ::google::protobuf::internal::ArenaStringPtr tecnico_;
  ::google::protobuf::int32 pontos_;
  ::google::protobuf::int32 qtdjogos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Classes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Atleta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Atleta) */ {
 public:
  Atleta();
  virtual ~Atleta();

  Atleta(const Atleta& from);

  inline Atleta& operator=(const Atleta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Atleta(Atleta&& from) noexcept
    : Atleta() {
    *this = ::std::move(from);
  }

  inline Atleta& operator=(Atleta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Atleta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Atleta* internal_default_instance() {
    return reinterpret_cast<const Atleta*>(
               &_Atleta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Atleta* other);
  friend void swap(Atleta& a, Atleta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Atleta* New() const final {
    return CreateMaybeMessage<Atleta>(NULL);
  }

  Atleta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Atleta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Atleta& from);
  void MergeFrom(const Atleta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Atleta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nome = 1;
  void clear_nome();
  static const int kNomeFieldNumber = 1;
  const ::std::string& nome() const;
  void set_nome(const ::std::string& value);
  #if LANG_CXX11
  void set_nome(::std::string&& value);
  #endif
  void set_nome(const char* value);
  void set_nome(const char* value, size_t size);
  ::std::string* mutable_nome();
  ::std::string* release_nome();
  void set_allocated_nome(::std::string* nome);

  // string posicao = 2;
  void clear_posicao();
  static const int kPosicaoFieldNumber = 2;
  const ::std::string& posicao() const;
  void set_posicao(const ::std::string& value);
  #if LANG_CXX11
  void set_posicao(::std::string&& value);
  #endif
  void set_posicao(const char* value);
  void set_posicao(const char* value, size_t size);
  ::std::string* mutable_posicao();
  ::std::string* release_posicao();
  void set_allocated_posicao(::std::string* posicao);

  // int32 numCamisa = 3;
  void clear_numcamisa();
  static const int kNumCamisaFieldNumber = 3;
  ::google::protobuf::int32 numcamisa() const;
  void set_numcamisa(::google::protobuf::int32 value);

  // int32 qtdTitulos = 4;
  void clear_qtdtitulos();
  static const int kQtdTitulosFieldNumber = 4;
  ::google::protobuf::int32 qtdtitulos() const;
  void set_qtdtitulos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Atleta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nome_;
  ::google::protobuf::internal::ArenaStringPtr posicao_;
  ::google::protobuf::int32 numcamisa_;
  ::google::protobuf::int32 qtdtitulos_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Classes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Time_Tecnico

// string nome = 1;
inline void Time_Tecnico::clear_nome() {
  nome_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Time_Tecnico::nome() const {
  // @@protoc_insertion_point(field_get:Time.Tecnico.nome)
  return nome_.GetNoArena();
}
inline void Time_Tecnico::set_nome(const ::std::string& value) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Time.Tecnico.nome)
}
#if LANG_CXX11
inline void Time_Tecnico::set_nome(::std::string&& value) {
  
  nome_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Time.Tecnico.nome)
}
#endif
inline void Time_Tecnico::set_nome(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Time.Tecnico.nome)
}
inline void Time_Tecnico::set_nome(const char* value, size_t size) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Time.Tecnico.nome)
}
inline ::std::string* Time_Tecnico::mutable_nome() {
  
  // @@protoc_insertion_point(field_mutable:Time.Tecnico.nome)
  return nome_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Time_Tecnico::release_nome() {
  // @@protoc_insertion_point(field_release:Time.Tecnico.nome)
  
  return nome_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Time_Tecnico::set_allocated_nome(::std::string* nome) {
  if (nome != NULL) {
    
  } else {
    
  }
  nome_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nome);
  // @@protoc_insertion_point(field_set_allocated:Time.Tecnico.nome)
}

// int32 idade = 2;
inline void Time_Tecnico::clear_idade() {
  idade_ = 0;
}
inline ::google::protobuf::int32 Time_Tecnico::idade() const {
  // @@protoc_insertion_point(field_get:Time.Tecnico.idade)
  return idade_;
}
inline void Time_Tecnico::set_idade(::google::protobuf::int32 value) {
  
  idade_ = value;
  // @@protoc_insertion_point(field_set:Time.Tecnico.idade)
}

// int32 qtdTitulos = 3;
inline void Time_Tecnico::clear_qtdtitulos() {
  qtdtitulos_ = 0;
}
inline ::google::protobuf::int32 Time_Tecnico::qtdtitulos() const {
  // @@protoc_insertion_point(field_get:Time.Tecnico.qtdTitulos)
  return qtdtitulos_;
}
inline void Time_Tecnico::set_qtdtitulos(::google::protobuf::int32 value) {
  
  qtdtitulos_ = value;
  // @@protoc_insertion_point(field_set:Time.Tecnico.qtdTitulos)
}

// -------------------------------------------------------------------

// Time

// string nome = 1;
inline void Time::clear_nome() {
  nome_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Time::nome() const {
  // @@protoc_insertion_point(field_get:Time.nome)
  return nome_.GetNoArena();
}
inline void Time::set_nome(const ::std::string& value) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Time.nome)
}
#if LANG_CXX11
inline void Time::set_nome(::std::string&& value) {
  
  nome_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Time.nome)
}
#endif
inline void Time::set_nome(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Time.nome)
}
inline void Time::set_nome(const char* value, size_t size) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Time.nome)
}
inline ::std::string* Time::mutable_nome() {
  
  // @@protoc_insertion_point(field_mutable:Time.nome)
  return nome_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Time::release_nome() {
  // @@protoc_insertion_point(field_release:Time.nome)
  
  return nome_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Time::set_allocated_nome(::std::string* nome) {
  if (nome != NULL) {
    
  } else {
    
  }
  nome_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nome);
  // @@protoc_insertion_point(field_set_allocated:Time.nome)
}

// string tecnico = 2;
inline void Time::clear_tecnico() {
  tecnico_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Time::tecnico() const {
  // @@protoc_insertion_point(field_get:Time.tecnico)
  return tecnico_.GetNoArena();
}
inline void Time::set_tecnico(const ::std::string& value) {
  
  tecnico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Time.tecnico)
}
#if LANG_CXX11
inline void Time::set_tecnico(::std::string&& value) {
  
  tecnico_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Time.tecnico)
}
#endif
inline void Time::set_tecnico(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tecnico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Time.tecnico)
}
inline void Time::set_tecnico(const char* value, size_t size) {
  
  tecnico_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Time.tecnico)
}
inline ::std::string* Time::mutable_tecnico() {
  
  // @@protoc_insertion_point(field_mutable:Time.tecnico)
  return tecnico_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Time::release_tecnico() {
  // @@protoc_insertion_point(field_release:Time.tecnico)
  
  return tecnico_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Time::set_allocated_tecnico(::std::string* tecnico) {
  if (tecnico != NULL) {
    
  } else {
    
  }
  tecnico_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tecnico);
  // @@protoc_insertion_point(field_set_allocated:Time.tecnico)
}

// int32 pontos = 3;
inline void Time::clear_pontos() {
  pontos_ = 0;
}
inline ::google::protobuf::int32 Time::pontos() const {
  // @@protoc_insertion_point(field_get:Time.pontos)
  return pontos_;
}
inline void Time::set_pontos(::google::protobuf::int32 value) {
  
  pontos_ = value;
  // @@protoc_insertion_point(field_set:Time.pontos)
}

// int32 qtdJogos = 4;
inline void Time::clear_qtdjogos() {
  qtdjogos_ = 0;
}
inline ::google::protobuf::int32 Time::qtdjogos() const {
  // @@protoc_insertion_point(field_get:Time.qtdJogos)
  return qtdjogos_;
}
inline void Time::set_qtdjogos(::google::protobuf::int32 value) {
  
  qtdjogos_ = value;
  // @@protoc_insertion_point(field_set:Time.qtdJogos)
}

// -------------------------------------------------------------------

// Atleta

// string nome = 1;
inline void Atleta::clear_nome() {
  nome_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Atleta::nome() const {
  // @@protoc_insertion_point(field_get:Atleta.nome)
  return nome_.GetNoArena();
}
inline void Atleta::set_nome(const ::std::string& value) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Atleta.nome)
}
#if LANG_CXX11
inline void Atleta::set_nome(::std::string&& value) {
  
  nome_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Atleta.nome)
}
#endif
inline void Atleta::set_nome(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Atleta.nome)
}
inline void Atleta::set_nome(const char* value, size_t size) {
  
  nome_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Atleta.nome)
}
inline ::std::string* Atleta::mutable_nome() {
  
  // @@protoc_insertion_point(field_mutable:Atleta.nome)
  return nome_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Atleta::release_nome() {
  // @@protoc_insertion_point(field_release:Atleta.nome)
  
  return nome_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Atleta::set_allocated_nome(::std::string* nome) {
  if (nome != NULL) {
    
  } else {
    
  }
  nome_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nome);
  // @@protoc_insertion_point(field_set_allocated:Atleta.nome)
}

// string posicao = 2;
inline void Atleta::clear_posicao() {
  posicao_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Atleta::posicao() const {
  // @@protoc_insertion_point(field_get:Atleta.posicao)
  return posicao_.GetNoArena();
}
inline void Atleta::set_posicao(const ::std::string& value) {
  
  posicao_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Atleta.posicao)
}
#if LANG_CXX11
inline void Atleta::set_posicao(::std::string&& value) {
  
  posicao_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Atleta.posicao)
}
#endif
inline void Atleta::set_posicao(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  posicao_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Atleta.posicao)
}
inline void Atleta::set_posicao(const char* value, size_t size) {
  
  posicao_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Atleta.posicao)
}
inline ::std::string* Atleta::mutable_posicao() {
  
  // @@protoc_insertion_point(field_mutable:Atleta.posicao)
  return posicao_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Atleta::release_posicao() {
  // @@protoc_insertion_point(field_release:Atleta.posicao)
  
  return posicao_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Atleta::set_allocated_posicao(::std::string* posicao) {
  if (posicao != NULL) {
    
  } else {
    
  }
  posicao_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), posicao);
  // @@protoc_insertion_point(field_set_allocated:Atleta.posicao)
}

// int32 numCamisa = 3;
inline void Atleta::clear_numcamisa() {
  numcamisa_ = 0;
}
inline ::google::protobuf::int32 Atleta::numcamisa() const {
  // @@protoc_insertion_point(field_get:Atleta.numCamisa)
  return numcamisa_;
}
inline void Atleta::set_numcamisa(::google::protobuf::int32 value) {
  
  numcamisa_ = value;
  // @@protoc_insertion_point(field_set:Atleta.numCamisa)
}

// int32 qtdTitulos = 4;
inline void Atleta::clear_qtdtitulos() {
  qtdtitulos_ = 0;
}
inline ::google::protobuf::int32 Atleta::qtdtitulos() const {
  // @@protoc_insertion_point(field_get:Atleta.qtdTitulos)
  return qtdtitulos_;
}
inline void Atleta::set_qtdtitulos(::google::protobuf::int32 value) {
  
  qtdtitulos_ = value;
  // @@protoc_insertion_point(field_set:Atleta.qtdTitulos)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Classes_2eproto
